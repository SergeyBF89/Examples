//----------------------------------------вариант со строками---------------------------------
/* 
string[,] table = new string[2, 5]; // 2 строчки, 5 столбцов
// string.Empty // по умолчанию инициализация строк используется с помощью вот такой константы(пустой строкой)
// table[0, 0]  table[0, 1]  table[0, 2]  table[0, 3]  table[0, 4] // первая строка и 5 столбцов
// table[1, 0]  table[1, 1]  table[1, 2]  table[1, 3]  table[1, 4] // вторая строка и 5 столбцов

table[1, 2] = "слово"; // обращаемся к нужному элементу, название массива table[1 это ind строки, 2 это ind столбца], далее можно работать как с обычной переменной

for(int i = 0; i < 2; i++) // i по строкам
{
    for(int j = 0; j < 5; j++) // j по столбцам
    {
        Console.WriteLine($"-{table[i, j]}-"); // вывод массива table с обращением к индексам [i, j]
    }
}
*/
//-------------------------------------вариант с числами-------------------------------------------
/*
int[,] matrix = new int[3, 4]; // 3 строки, 4 столбца

for(int i = 0; i < 3; i++) // i по строкам
{
    for(int j = 0; j < 4; j++) // j по столбцам
    {
        Console.Write($"{matrix[i, j]} ");
    }
    Console.WriteLine();
}
*/
//------------------еще вариант с числами------------------
/*
int[,] matrix = new int[3, 4]; // 3 строки, 4 столбца
for(int i = 0; i < matrix.GetLength(0); i++) // i по строкам, matrix.GetLength(0) - 3
{
    for(int j = 0; j < matrix.GetLength(1); j++) // j по столбцам, matrix.GetLength(1) - 4
    {
        Console.Write($"{matrix[i, j]} ");
    }
    Console.WriteLine();
}
*/
//-----------------вариант с числами и метод------------------
/*
int[,] matrix = new int[3, 4]; // 3 строки, 4 столбца

//---------------метод который печатает отдельно двумерную матрицу -------------------

void PrintArray(int[,] matrix1)
{
    for(int i = 0; i < matrix.GetLength(0); i++) // i по строкам, matrix.GetLength(0) - 3
    {
        for(int j = 0; j < matrix.GetLength(1); j++) // j по столбцам, matrix.GetLength(1) - 4
        {
            Console.Write($"{matrix[i, j]} ");
        }
        Console.WriteLine();
    }
}
//---------------------метод заполнения матрицы случайными числами-------------

void FullArray(int[,] matrix1)
{
    for(int i = 0; i < matrix1.GetLength(0); i++)
    {
        for(int j = 0; j < matrix1.GetLength(1); j++)
        {
            matrix1 [i,j] = new Random().Next(1, 10); // получается полуинтервал [1, 10)
        }
    }
}
PrintArray(matrix);
Console.WriteLine(); // пустая строка(типа пробела в выводе)
FullArray(matrix);
PrintArray(matrix);
*/

//----------------------- Как представить черно белое изображение.-----------------------------------
// 0 - закрашенный пиксель
// 1 - незакрашенный пиксель
//                                               Движение точки:
//                                                  x - 1, y (1 шаг идём в верх)
//                                                    ^
//                                                    |
//                (2 шаг идём в лево)  x, y - 1  <- (x, y)  ->  x, y + 1  (4 шаг идём в право)  
//                                                    |
//                                                    ^
//                                                  x + 1, y  (3 шаг идём в низ) 

/*
int[,] pic = new int[,]
{ 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
    {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
    {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
    {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 }, 
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, 
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, 
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 }, 
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, 
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, 
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 }, 
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 }, 
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 }, 
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 }, 
    {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 }, 
    {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 }, 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 }, 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
}; 
//----------------------метод выведения матрицы------------------------
void PrintImage(int[,] image)
{
    for(int i = 0; i < image.GetLength(0); i++)
    {
        for(int j = 0; j < image.GetLength(1); j++)
        {
            if(image[i, j] == 0) Console.Write($" "); // если image[i, j] совпадает с 0, печатаем искувственный пробел
            else Console.Write($"+"); 
        }
        Console.WriteLine();
        
    }
}
//--------------------------------метод закрашивания-------------------------------------
void FillImage(int row, int col) // (int row, int col) позиция строки и пикселя с которго начнем нашу закраску
{
    if(pic[row, col] == 0) 
    {
        pic[row, col] = 1; // будем красить единичкой
        FillImage(row - 1, col); // движение точки
        FillImage(row, col - 1);
        FillImage(row + 1, col);
        FillImage(row, col + 1);
    }
}
PrintImage(pic);
FillImage(13, 13); // точка от куда начали закраску
PrintImage(pic);
*/

//------------------------Принимаем число, факториал которого нужно вычеслить----------------------------
/*
//------функция-----
int Factorial(int n)
{
    // 1! = 1 (1!-обозначает факториал)
    // 0! = 1
    if(n == 1) return 1;
    else return n * Factorial(n - 1);
}
Console.WriteLine(Factorial(3)); // 1 * 2 * 3 = 6
*/
//----------------- ёще вариант с большими числами-------------------
/*
double Factorial(int n)
{
    if(n == 1) return 1;
    else return n * Factorial(n - 1);
}
for(int i = 1; i < 40; i++)
{
    Console.WriteLine($"{i}! = {Factorial(i)}");
}
*/

//-------------------------------------------------Выводим числа фибаначи----------------------------------------
// f(1) = 1
// f(2) = 1
// f(n) = f(n - 1) + f(n - 2) 
//-------функция-------
/*
int Fibonacci(int n)
{
    if(n == 1 || n == 2) return 1;
    else return Fibonacci(n - 1) + Fibonacci(n - 2);
}
for(int i = 1; i < 10; i++)
{
    Console.WriteLine(Fibonacci(i));
}
*/
//-------функция с большими числами------
/*
double Fibonacci(int n)
{
    if(n == 1 || n == 2) return 1;
    else return Fibonacci(n - 1) + Fibonacci(n - 2);
}
for(int i = 1; i < 40; i++)
{
    Console.WriteLine($"f({i}) {Fibonacci(i)}");
}
*/

